from dotenv import load_dotenv
import asyncio, logging
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from enum import Enum

load_dotenv()

waiting_players = []
active_games = {}
ready_players = set()
game_settings = {}

VICTORY_STICKER = "CAACAgIAAxkBAAELJEZl8mI7AAGeuI1P-AABu5AAAdOWLxsqPQACEgADQbVWDGq3-RpIOilHNAQ"
DEFAULT_ROUNDS = 1
DEFAULT_PLAYERS = 2

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
def load_token():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("Bot token not set")
    return token

try:
    Token = load_token()
except ValueError as e:
    print("Error loading token")
    exit(1)

bot = Bot(Token)
dp = Dispatcher()

load_dotenv()

waiting_players = []
active_games = {}
ready_players = set()
game_settings = {}

VICTORY_STICKER = "CAACAgIAAxkBAAELJEZl8mI7AAGeuI1P-AABu5AAAdOWLxsqPQACEgADQbVWDGq3-RpIOilHNAQ"
DEFAULT_ROUNDS = 1
DEFAULT_PLAYERS = 2


class Move(Enum):
    ROCK = "rock"
    PAPER = "paper"
    SCISSORS = "scissors"


class RockPaperScissorsGame:
    def __init__(self, player1_id, player2_id, rounds=DEFAULT_ROUNDS):
        self.player1_id = player1_id
        self.player2_id = player2_id
        self.moves = {}
        self.status = "waiting_for_moves"
        self.total_rounds = rounds
        self.current_round = 1
        self.scores = {player1_id: 0, player2_id: 0}

    def make_move(self, player_id, move):
        if player_id not in [self.player1_id, self.player2_id]:
            raise ValueError("Invalid player")
        if self.status != "waiting_for_moves":
            raise ValueError("Game is not in progress")

        self.moves[player_id] = Move(move)

        if len(self.moves) == 2:
            winner = self.determine_winner()
            if winner:
                self.scores[winner] += 1

            if self.current_round < self.total_rounds:
                self.current_round += 1
                self.moves.clear()
                return "next_round", winner
            else:
                self.status = "finished"
                final_winner = max(self.scores.items(), key=lambda x: x[1])[0]
                return "game_over", final_winner
        return None, None

    def determine_winner(self):
        move1 = self.moves[self.player1_id]
        move2 = self.moves[self.player2_id]

        if move1 == move2:
            return None

        winning_moves = {
            Move.ROCK: Move.SCISSORS,
            Move.PAPER: Move.ROCK,
            Move.SCISSORS: Move.PAPER
        }

        if winning_moves[move1] == move2:
            return self.player1_id
        return self.player2_id


# –ß–∞—Å—Ç—å 2: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_move_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="ü™® –ö–∞–º–µ–Ω—å", callback_data="move_rock"),
            InlineKeyboardButton(text="‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="move_scissors"),
            InlineKeyboardButton(text="üìÑ –ë—É–º–∞–≥–∞", callback_data="move_paper")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def create_settings_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–†–∞—É–Ω–¥—ã: 1", callback_data="rounds_1"),
         InlineKeyboardButton(text="–†–∞—É–Ω–¥—ã: 3", callback_data="rounds_3"),
         InlineKeyboardButton(text="–†–∞—É–Ω–¥—ã: 5", callback_data="rounds_5")],
        [InlineKeyboardButton(text="–ò–≥—Ä–æ–∫–∏: 2", callback_data="players_2"),
         InlineKeyboardButton(text="–ò–≥—Ä–æ–∫–∏: 3", callback_data="players_3"),
         InlineKeyboardButton(text="–ò–≥—Ä–æ–∫–∏: 4", callback_data="players_4")],
        [InlineKeyboardButton(text="–°–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="custom_settings")],
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_with_settings")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


# –ß–∞—Å—Ç—å 3: –ö–æ–º–∞–Ω–¥—ã –∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id

    for game in active_games.values():
        if user_id in game["players"]:
            await message.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
            return

    game_settings[user_id] = {"rounds": DEFAULT_ROUNDS, "players": DEFAULT_PLAYERS}
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞:",
        reply_markup=create_settings_keyboard()
    )


@dp.message(Command("join"))
async def join_waiting_command(message: types.Message):
    global waiting_players
    user_id = message.from_user.id

    for game in active_games.values():
        if user_id in game["players"]:
            await message.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
            return

    if user_id in waiting_players:
        await message.answer("–í—ã —É–∂–µ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è")
    else:
        waiting_players.append(user_id)
        required_players = game_settings.get(user_id, {}).get('players', DEFAULT_PLAYERS)
        await message.answer(f"–í—ã –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(waiting_players)}/{required_players}")

        if len(waiting_players) >= 2:
            other_players = [p for p in waiting_players if p != user_id]
            for player in other_players:
                if player not in ready_players:
                    await message.bot.send_message(
                        player,
                        f"–ò–≥—Ä–æ–∫ {message.from_user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –ù–∞–∂–º–∏—Ç–µ /ready –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å"
                    )


@dp.message(Command("ready"))
async def ready_command(message: types.Message):
    global ready_players, waiting_players
    user_id = message.from_user.id

    if user_id not in waiting_players:
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –∫–æ–º–∞–Ω–¥–æ–π /join")
        return

    if user_id in ready_players:
        await message.answer("–í—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ!")
        return

    ready_players.add(user_id)
    player_number = waiting_players.index(user_id) + 1

    for waiting_player in waiting_players:
        if waiting_player == user_id:
            await message.answer(f"–í—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ! –í—ã - –ò–≥—Ä–æ–∫ {player_number}")
        else:
            await message.bot.send_message(
                waiting_player,
                f"–ò–≥—Ä–æ–∫ {message.from_user.first_name} (–ò–≥—Ä–æ–∫ {player_number}) –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ! –ù–∞–ø–∏—à–∏—Ç–µ /ready —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
            )

    if len(ready_players) >= 2 and len(waiting_players) >= 2:
        players_to_start = [p for p in waiting_players if p in ready_players][:2]
        if len(players_to_start) >= 2:
            rounds = game_settings.get(players_to_start[0], {}).get('rounds', DEFAULT_ROUNDS)
            for player_id in players_to_start:
                await message.bot.send_message(player_id,
                                               f"–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: {rounds}")
            await asyncio.sleep(1)
            await start_game(players_to_start[0], players_to_start[1], message.bot, rounds)
            ready_players.remove(players_to_start[0])
            ready_players.remove(players_to_start[1])


@dp.message(Command("leave"))
async def leave_waiting_players(message: types.Message):
    global waiting_players, ready_players
    user_id = message.from_user.id
    if user_id in waiting_players:
        waiting_players.remove(user_id)
        if user_id in ready_players:
            ready_players.remove(user_id)
        await message.answer("–í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è")
    else:
        await message.answer("–í—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è")


@dp.callback_query(lambda c: c.data.startswith(('rounds_', 'players_', 'start_with_', 'custom_')))
async def process_settings(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if data.startswith('rounds_'):
        rounds = int(data.split('_')[1])
        game_settings[user_id] = game_settings.get(user_id, {})
        game_settings[user_id]['rounds'] = rounds
        await callback_query.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {rounds} —Ä–∞—É–Ω–¥–æ–≤")

    elif data.startswith('players_'):
        players = int(data.split('_')[1])
        game_settings[user_id] = game_settings.get(user_id, {})
        game_settings[user_id]['players'] = players
        await callback_query.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {players} –∏–≥—Ä–æ–∫–æ–≤")

    elif data == 'custom_settings':
        await callback_query.answer()
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "/settings <–∫–æ–ª-–≤–æ —Ä–∞—É–Ω–¥–æ–≤> <–∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /settings 7 3\n\n"
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
            "- –†–∞—É–Ω–¥—ã: –æ—Ç 1 –¥–æ 15\n"
            "- –ò–≥—Ä–æ–∫–∏: –æ—Ç 2 –¥–æ 10"
        )

    elif data == 'start_with_settings':
        settings = game_settings.get(user_id, {})
        rounds = settings.get('rounds', DEFAULT_ROUNDS)
        players = settings.get('players', DEFAULT_PLAYERS)
        await callback_query.answer()
        await callback_query.message.edit_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: {rounds}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {players}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
        )
@dp.message(Command("games"))
async def list_games(message: types.Message):
    if not active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä")
        return

    games_list = []
    for game_id, info in active_games.items():
        game = info["game"]
        round_info = f"(–†–∞—É–Ω–¥ {game.current_round}/{game.total_rounds})"
        games_list.append(f"–ò–≥—Ä–∞ #{game_id}: {len(info['players'])} –∏–≥—Ä–æ–∫–æ–≤ {round_info}")

    await message.answer("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä:\n" + "\n".join(games_list))


@dp.message(Command("settings"))
async def custom_settings_command(message: types.Message):
    try:
        _, rounds, players = message.text.split()
        rounds = int(rounds)
        players = int(players)

        if rounds < 1 or players < 2:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –∞ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ 1")
            return

        if rounds > 15 or players > 10:
            await message.answer("–ú–∞–∫—Å–∏–º—É–º 15 —Ä–∞—É–Ω–¥–æ–≤ –∏ 10 –∏–≥—Ä–æ–∫–æ–≤")
            return

        user_id = message.from_user.id
        game_settings[user_id] = {
            'rounds': rounds,
            'players': players
        }

        await message.answer(
            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: {rounds}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {players}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É"
        )

    except ValueError:
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/settings —Ä–∞—É–Ω–¥—ã –∏–≥—Ä–æ–∫–∏\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /settings 7 3"
        )


# –ß–∞—Å—Ç—å 4: –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏ –∫–æ–ª–ª–±—ç–∫–∏
async def start_game(player1_id, player2_id, bot, rounds=DEFAULT_ROUNDS):
    try:
        game = RockPaperScissorsGame(player1_id, player2_id, rounds)
        game_id = len(active_games) + 1
        active_games[game_id] = {
            "game": game,
            "players": [player1_id, player2_id]
        }

        for player_id in [player1_id, player2_id]:
            if player_id in waiting_players:
                waiting_players.remove(player_id)

        keyboard = create_move_keyboard()

        await bot.send_message(player1_id, f"–†–∞—É–Ω–¥ {game.current_round}. –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π —Ö–æ–¥:", reply_markup=keyboard)
        await asyncio.sleep(0.5)
        await bot.send_message(player2_id, f"–†–∞—É–Ω–¥ {game.current_round}. –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π —Ö–æ–¥:", reply_markup=keyboard)

    except Exception as e:
        logging.error(f"Error starting game: {e}")
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        for player_id in [player1_id, player2_id]:
            try:
                await bot.send_message(player_id, error_message)
            except:
                pass


@dp.callback_query(lambda c: c.data.startswith('move_'))
async def process_move(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    move = callback_query.data.split('_')[1]

    game_id = None
    for gid, game_info in active_games.items():
        if user_id in game_info["players"]:
            game_id = gid
            break

    if game_id is None:
        await callback_query.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")
        return

    game = active_games[game_id]["game"]

    try:
        status, winner = game.make_move(user_id, move)
        await callback_query.answer("–•–æ–¥ —Å–¥–µ–ª–∞–Ω!")

        if status == "next_round":
            if winner:
                winner_info = await callback_query.bot.get_chat(winner)
                round_result = f"–†–∞—É–Ω–¥ –≤—ã–∏–≥—Ä–∞–ª {winner_info.first_name}!"
            else:
                round_result = "–ù–∏—á—å—è!"

            for player_id in [game.player1_id, game.player2_id]:
                keyboard = create_move_keyboard()
                await callback_query.bot.send_message(
                    player_id,
                    f"{round_result}\n–†–∞—É–Ω–¥ {game.current_round}. –°–¥–µ–ª–∞–π—Ç–µ —Ö–æ–¥:",
                    reply_markup=keyboard
                )

        elif status == "game_over":
            try:
                winner_info = await callback_query.bot.get_chat(winner)
                winner_name = winner_info.first_name
            except:
                winner_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫"

            for player_id in [game.player1_id, game.player2_id]:
                if player_id == winner:
                    await callback_query.bot.send_message(
                        player_id,
                        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ —Å–æ —Å—á–µ—Ç–æ–º {game.scores[winner]}:{game.scores[game.player1_id if winner == game.player2_id else game.player2_id]}"
                    )
                    await callback_query.bot.send_sticker(player_id, VICTORY_STICKER)
                else:
                    await callback_query.bot.send_message(
                        player_id,
                        f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª {winner_name} —Å–æ —Å—á–µ—Ç–æ–º {game.scores[winner]}:{game.scores[player_id]}"
                    )

            del active_games[game_id]

    except ValueError as e:
        await callback_query.answer(str(e))


# –ß–∞—Å—Ç—å 5: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(dp.start_polling(bot))
    except Exception as e:
        logging.error(f"Error occurred: {e}")